name: OWASP ZAP Baseline Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  zap-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Start local web server
      run: |
        mkdir -p zap-reports
        nohup python3 server.py > server.log 2>&1 &
        # Espera até o servidor subir (max 20 tentativas)
        for i in {1..20}; do
          if curl -sSf http://127.0.0.1:8080/ >/dev/null; then
            echo "Servidor disponível"
            break
          fi
          echo "Aguardando servidor... tentativa $i"
          sleep 1
        done
        head -n 50 server.log
      shell: bash

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.14.0
      with:
        # No runner Linux, a action usa `--network=host`, então 127.0.0.1 aponta para o host.
        target: 'http://127.0.0.1:8080'
        cmd_options: '-J /zap/wrk/zap-reports/report.json -r /zap/wrk/zap-reports/report.html'
        fail_action: false
      

    - name: Fail if High/Critical alerts exist
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y jq
        REPORT=zap-reports/report.json
        if [ ! -f "$REPORT" ]; then
          echo "::error::ZAP report not found at $REPORT"
          exit 1
        fi

        # Função jq para extrair severidade como texto (High/Medium/Low/Informational)
        # Inclui suporte opcional a "Critical" caso apareça em alguma variante de relatório
        JQ_FUNC='def risk: if has("risk") then .risk elif has("riskdesc") then (.riskdesc | split(" ")[0]) else "Unknown" end;'
        TOTAL=$(jq '[.site[].alerts[]?] | length' "$REPORT")
        LOW=$(jq "$JQ_FUNC [.site[].alerts[]? | risk] | map(select(.==\"Low\")) | length" "$REPORT")
        MEDIUM=$(jq "$JQ_FUNC [.site[].alerts[]? | risk] | map(select(.==\"Medium\")) | length" "$REPORT")
        HIGH=$(jq "$JQ_FUNC [.site[].alerts[]? | risk] | map(select(.==\"High\")) | length" "$REPORT")
        CRITICAL=$(jq "$JQ_FUNC [.site[].alerts[]? | risk] | map(select(.==\"Critical\")) | length" "$REPORT")
        INFO=$(jq "$JQ_FUNC [.site[].alerts[]? | risk] | map(select(.==\"Informational\")) | length" "$REPORT")

        echo "Quantidade total de alertas: $TOTAL"
        echo "Alertas por severidade - Informational: $INFO, Low: $LOW, Medium: $MEDIUM, High: $HIGH, Critical: $CRITICAL"

        echo "Tipos de vulnerabilidades mais comuns:"
        jq -r '[.site[].alerts[]? | .name] | group_by(.) | map({name: .[0], count: length}) | sort_by(-.count)[] | "\(.name): \(.count)"' "$REPORT"

        if [ "$HIGH" -gt 0 ] || [ "$CRITICAL" -gt 0 ]; then
          echo "::error::ZAP encontrou $HIGH High e $CRITICAL Critical. Pipeline falhando."
          exit 1
        fi

        echo "Nenhum alerta High/Critical encontrado."

    - name: Upload ZAP reports and server log
      uses: actions/upload-artifact@v4
      with:
        name: zap-reports
        path: |
          zap-reports/report.html
          zap-reports/report.json
          server.log

    - name: Stop local server
      if: always()
      run: |
        pkill -f "python3 server.py" || true
      shell: bash
