name: OWASP ZAP Baseline Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  zap-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Start local web server
      run: |
        mkdir -p zap-reports
        nohup python3 server.py > server.log 2>&1 &
        # Espera até o servidor subir (max 20 tentativas)
        for i in {1..20}; do
          if curl -sSf http://127.0.0.1:8080/ >/dev/null; then
            echo "Servidor disponível"
            break
          fi
          echo "Aguardando servidor... tentativa $i"
          sleep 1
        done
        head -n 50 server.log
      shell: bash

    - name: Run OWASP ZAP Baseline Scan (docker)
      run: |
        mkdir -p zap-reports
        docker pull ghcr.io/zaproxy/zaproxy:stable
        docker run --rm \
          -v "$(pwd)":/zap/wrk/:rw \
          --network=host \
          -t ghcr.io/zaproxy/zaproxy:stable \
          zap-baseline.py \
            -t http://127.0.0.1:8080 \
            -J zap-reports/report.json \
            -w zap-reports/report.md \
            -r zap-reports/report.html
        ls -la zap-reports
      shell: bash

    - name: Fail if High/Critical alerts exist
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y jq
        REPORT=zap-reports/report.json
        if [ ! -f "$REPORT" ]; then
          echo "::error::ZAP report not found at $REPORT"
          exit 1
        fi

        TOTAL=$(jq '[.site[].alerts[]?] | length' $REPORT)
        echo "Quantidade total de alertas: $TOTAL"

        LOW=$(jq '[.site[].alerts[]? | select(.risk=="Low")] | length' $REPORT)
        MEDIUM=$(jq '[.site[].alerts[]? | select(.risk=="Medium")] | length' $REPORT)
        HIGH=$(jq '[.site[].alerts[]? | select(.risk=="High")] | length' $REPORT)
        CRITICAL=$(jq '[.site[].alerts[]? | select(.risk=="Critical")] | length' $REPORT)

        echo "Alertas por severidade - Low: $LOW, Medium: $MEDIUM, High: $HIGH, Critical: $CRITICAL"

        echo "Tipos de vulnerabilidades mais comuns:"
        jq -r '[.site[].alerts[]? | .name] | group_by(.) | map({name: .[0], count: length}) | sort_by(-.count)[] | "\(.name): \(.count)"' $REPORT

        if [ "$HIGH" -gt 0 ] || [ "$CRITICAL" -gt 0 ]; then
          echo "::error::ZAP encontrou $HIGH High e $CRITICAL Critical alerts. Pipeline falhando."
          exit 1
        fi

        echo "Nenhum alerta High/Critical encontrado."

    - name: Upload ZAP reports and server log
      uses: actions/upload-artifact@v4
      with:
        name: zap-reports
        path: |
          zap-reports/report.html
          zap-reports/report.json
          zap-reports/report.md
          server.log

    - name: Stop local server
      if: always()
      run: |
        pkill -f "python3 server.py" || true
      shell: bash
